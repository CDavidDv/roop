#!/usr/bin/env python3
"""
Script para descargar modelos directamente usando insightface
"""

import os
import sys
import subprocess
import shutil

def clean_models_directory():
    """Limpia el directorio de modelos corruptos"""
    print("üßπ LIMPIANDO MODELOS CORRUPTOS")
    print("=" * 50)
    
    models_dir = "/root/.insightface/models/buffalo_l"
    
    if os.path.exists(models_dir):
        print(f"üóëÔ∏è Eliminando directorio corrupto: {models_dir}")
        shutil.rmtree(models_dir)
    
    # Crear directorio limpio
    os.makedirs(models_dir, exist_ok=True)
    print("‚úÖ Directorio de modelos limpio creado")

def download_models_direct():
    """Descarga los modelos directamente usando insightface"""
    print("üì• DESCARGANDO MODELOS DIRECTAMENTE")
    print("=" * 50)
    
    # Script para descargar modelos usando insightface
    download_script = """
import insightface
import os

try:
    print("üîÑ Inicializando InsightFace...")
    
    # Crear aplicaci√≥n de an√°lisis facial (esto descargar√° autom√°ticamente los modelos)
    app = insightface.app.FaceAnalysis(name='buffalo_l', providers=['CPUExecutionProvider'])
    print("‚úÖ InsightFace inicializado")
    
    # Preparar la aplicaci√≥n (esto descargar√° los modelos si no existen)
    app.prepare(ctx_id=0, det_size=(640, 640))
    print("‚úÖ Modelos descargados autom√°ticamente")
    
    # Verificar que los modelos existan
    models_dir = "/root/.insightface/models/buffalo_l"
    required_models = [
        "1k3d68.onnx",
        "2d106det.onnx", 
        "det_10g.onnx",
        "genderage.onnx",
        "w600k_r50.onnx"
    ]
    
    print("üìã Verificando modelos descargados:")
    for model in required_models:
        model_path = os.path.join(models_dir, model)
        if os.path.exists(model_path):
            size = os.path.getsize(model_path)
            print(f"  ‚úÖ {model} - {size:,} bytes")
        else:
            print(f"  ‚ùå {model} - NO ENCONTRADO")
    
    print("‚úÖ Descarga de modelos completada")
    
except Exception as e:
    print(f"‚ùå Error descargando modelos: {e}")
    raise
"""
    
    try:
        print("üîÑ Ejecutando descarga autom√°tica...")
        result = subprocess.run([sys.executable, "-c", download_script], 
                              capture_output=True, text=True, timeout=300)
        print(result.stdout)
        if result.stderr:
            print(f"‚ö†Ô∏è Warnings: {result.stderr}")
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå Error en descarga: {e}")
        return False

def test_models():
    """Prueba que los modelos funcionen correctamente"""
    print("üß™ PROBANDO MODELOS")
    print("=" * 50)
    
    models_dir = "/root/.insightface/models/buffalo_l"
    required_models = [
        "1k3d68.onnx",
        "2d106det.onnx", 
        "det_10g.onnx",
        "genderage.onnx",
        "w600k_r50.onnx"
    ]
    
    # Verificar que todos los modelos existan
    for model in required_models:
        model_path = os.path.join(models_dir, model)
        if os.path.exists(model_path):
            size = os.path.getsize(model_path)
            print(f"‚úÖ {model} - {size:,} bytes")
        else:
            print(f"‚ùå {model} - NO ENCONTRADO")
            return False
    
    # Probar InsightFace
    test_code = """
import insightface
import cv2
import numpy as np

try:
    # Crear aplicaci√≥n de an√°lisis facial
    app = insightface.app.FaceAnalysis(name='buffalo_l', providers=['CPUExecutionProvider'])
    app.prepare(ctx_id=0, det_size=(640, 640))
    print("‚úÖ InsightFace inicializado correctamente")
    
    # Crear imagen de prueba
    test_img = np.zeros((100, 100, 3), dtype=np.uint8)
    
    # Probar detecci√≥n
    faces = app.get(test_img)
    print("‚úÖ Detecci√≥n facial funcionando")
    
    print("‚úÖ Todos los modelos funcionan correctamente")
    
except Exception as e:
    print(f"‚ùå Error probando modelos: {e}")
    raise
"""
    
    try:
        result = subprocess.run([sys.executable, "-c", test_code], 
                              capture_output=True, text=True, timeout=60)
        print(result.stdout)
        if result.stderr:
            print(f"‚ö†Ô∏è Warnings: {result.stderr}")
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå Error en prueba: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üöÄ DESCARGANDO MODELOS DIRECTAMENTE")
    print("=" * 60)
    
    # Paso 1: Limpiar modelos corruptos
    clean_models_directory()
    
    # Paso 2: Descargar modelos usando insightface
    if not download_models_direct():
        print("‚ùå Error descargando modelos")
        return 1
    
    # Paso 3: Probar modelos
    if not test_models():
        print("‚ùå Los modelos no funcionan correctamente")
        return 1
    
    print("\nüéâ ¬°MODELOS DESCARGADOS CORRECTAMENTE!")
    print("=" * 50)
    print("‚úÖ Modelos limpios descargados")
    print("‚úÖ InsightFace funcionando")
    print("‚úÖ Puedes ejecutar el procesamiento por lotes ahora")
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 
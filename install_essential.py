#!/usr/bin/env python3
"""
Script de instalaci√≥n de dependencias esenciales para ROOP (sin GUI)
"""

import subprocess
import sys
import os
import time

def install_package(package_name, description=""):
    """Instalar un paquete con descripci√≥n"""
    try:
        print(f"üì¶ Instalando {package_name}...")
        if description:
            print(f"   {description}")
        
        subprocess.check_call([sys.executable, "-m", "pip", "install", package_name, "--quiet"])
        print(f"‚úÖ {package_name} instalado")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error instalando {package_name}: {e}")
        return False

def install_essential_dependencies():
    """Instalar solo las dependencias esenciales (sin GUI)"""
    
    print("üöÄ INSTALACI√ìN DE DEPENDENCIAS ESENCIALES")
    print("=" * 60)
    
    # Solo dependencias esenciales (sin GUI)
    dependencies = [
        ("opencv-python", "Procesamiento de im√°genes y videos"),
        ("pillow", "Procesamiento de im√°genes"),
        ("onnxruntime-gpu", "Runtime de ONNX para GPU"),
        ("opennsfw2", "Detecci√≥n de contenido NSFW"),
        ("insightface", "Reconocimiento facial"),
        ("onnx", "Formato de modelo ONNX"),
        ("tensorflow", "Framework de machine learning"),
        ("albumentations", "Aumentaci√≥n de datos"),
        ("scikit-image", "Procesamiento de im√°genes"),
        ("scipy", "C√°lculos cient√≠ficos"),
        ("numpy", "C√°lculos num√©ricos"),
        ("torch", "PyTorch para deep learning"),
        ("torchvision", "Vision models para PyTorch"),
        ("tqdm", "Barras de progreso"),
        ("psutil", "Informaci√≥n del sistema"),
        ("GPUtil", "Informaci√≥n de GPU")
    ]
    
    successful = 0
    failed = 0
    
    for package, description in dependencies:
        if install_package(package, description):
            successful += 1
        else:
            failed += 1
    
    print(f"\nüìä RESUMEN: {successful} exitosos, {failed} fallidos")
    return failed == 0

def setup_environment():
    """Configurar variables de entorno"""
    
    print("\n‚öôÔ∏è CONFIGURANDO ENTORNO")
    print("=" * 60)
    
    # Configurar variables de entorno para GPU
    os.environ['TF_FORCE_GPU_ALLOW_GROWTH'] = 'true'
    os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
    
    print("‚úÖ Variables de entorno configuradas")
    
    # Verificar GPU
    try:
        import torch
        if torch.cuda.is_available():
            print(f"‚úÖ GPU detectada: {torch.cuda.get_device_name(0)}")
            print(f"‚úÖ VRAM disponible: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
        else:
            print("‚ö†Ô∏è No se detect√≥ GPU CUDA")
    except ImportError:
        print("‚ö†Ô∏è PyTorch no disponible para verificar GPU")

def create_folders():
    """Crear carpetas necesarias"""
    
    print("\nüìÅ CREANDO CARPETAS")
    print("=" * 60)
    
    folders = [
        "/content/videos",
        "/content/resultados", 
        "/content/sources"
    ]
    
    for folder in folders:
        if not os.path.exists(folder):
            os.makedirs(folder)
            print(f"‚úÖ Carpeta creada: {folder}")
        else:
            print(f"üìÅ Carpeta ya existe: {folder}")

def download_model():
    """Descargar modelo de face swap"""
    
    print("\nüì• DESCARGANDO MODELO")
    print("=" * 60)
    
    model_path = "inswapper_128.onnx"
    
    if os.path.exists(model_path):
        print(f"‚úÖ Modelo ya existe: {model_path}")
        return True
    
    try:
        print("üì• Descargando modelo de face swap...")
        subprocess.check_call([
            "wget", 
            "https://civitai.com/api/download/models/85159", 
            "-O", model_path,
            "--quiet"
        ])
        print("‚úÖ Modelo descargado exitosamente")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Error descargando modelo")
        return False

def verify_installation():
    """Verificar que todo est√© instalado correctamente"""
    
    print("\nüîç VERIFICANDO INSTALACI√ìN")
    print("=" * 60)
    
    critical_packages = [
        ("cv2", "OpenCV"),
        ("PIL", "Pillow"),
        ("onnxruntime", "ONNX Runtime"),
        ("opennsfw2", "OpenNSFW2"),
        ("insightface", "InsightFace"),
        ("torch", "PyTorch"),
        ("numpy", "NumPy"),
        ("tensorflow", "TensorFlow")
    ]
    
    all_ok = True
    
    for package, name in critical_packages:
        try:
            __import__(package)
            print(f"‚úÖ {name}")
        except ImportError:
            print(f"‚ùå {name} - NO INSTALADO")
            all_ok = False
    
    return all_ok

def show_usage_examples():
    """Mostrar ejemplos de uso"""
    
    print("\nüéØ EJEMPLOS DE USO")
    print("=" * 60)
    print("1. Procesamiento b√°sico (modo headless):")
    print("   python run_headless.py")
    print()
    print("2. Con imagen personalizada:")
    print("   python run_headless.py --source /content/sources/mi_imagen.jpg")
    print()
    print("3. Con carpetas personalizadas:")
    print("   python run_headless.py --source /content/sources/mi_imagen.jpg \\")
    print("   --input-folder /content/mis_videos --output-folder /content/mis_resultados")
    print()
    print("4. Con par√°metros optimizados:")
    print("   python run_headless.py --max-memory 10 --execution-threads 20")
    print("=" * 60)

def main():
    """Funci√≥n principal"""
    
    print("üéØ INSTALACI√ìN ESENCIAL PARA ROOP GPU (SIN GUI)")
    print("=" * 60)
    
    start_time = time.time()
    
    # Instalar dependencias esenciales
    deps_ok = install_essential_dependencies()
    
    # Configurar entorno
    setup_environment()
    
    # Crear carpetas
    create_folders()
    
    # Descargar modelo
    model_ok = download_model()
    
    # Verificar instalaci√≥n
    verify_ok = verify_installation()
    
    # Mostrar ejemplos de uso
    show_usage_examples()
    
    elapsed_time = time.time() - start_time
    
    print(f"\n‚è±Ô∏è Tiempo total: {elapsed_time:.1f} segundos")
    
    if deps_ok and model_ok and verify_ok:
        print("\n‚úÖ INSTALACI√ìN COMPLETADA EXITOSAMENTE")
        print("üöÄ ¬°Listo para procesar videos con GPU!")
        print("\nüí° Pr√≥ximos pasos:")
        print("1. Sube tu imagen fuente a /content/sources/")
        print("2. Sube tus videos a /content/videos/")
        print("3. Ejecuta: python run_headless.py")
    else:
        print("\n‚ö†Ô∏è INSTALACI√ìN INCOMPLETA")
        print("üí° Revisa los errores arriba")
    
    print("=" * 60)

if __name__ == "__main__":
    main() 
#!/usr/bin/env python3
"""
Script para solucionar el problema de torchvision.transforms.functional_tensor
"""

import subprocess
import sys
import os

def run_command(cmd, description):
    """Ejecutar comando y mostrar resultado"""
    print(f"üîß {description}...")
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} completado")
            if result.stdout.strip():
                print(f"   Salida: {result.stdout.strip()}")
        else:
            print(f"‚ùå {description} fall√≥")
            print(f"   Error: {result.stderr.strip()}")
        return result.returncode == 0
    except Exception as e:
        print(f"‚ùå Error ejecutando {description}: {e}")
        return False

def main():
    print("üöÄ SOLUCIONADOR PROBLEMA TORCHVISION")
    print("=" * 50)
    
    # Verificar versi√≥n actual de torchvision
    print("üìä Verificando versi√≥n actual de torchvision...")
    try:
        import torchvision
        print(f"   Versi√≥n actual: {torchvision.__version__}")
    except ImportError:
        print("   ‚ùå torchvision no est√° instalado")
    except Exception as e:
        print(f"   ‚ùå Error verificando torchvision: {e}")
    
    # Verificar si el m√≥dulo problem√°tico existe
    print("\nüîç Verificando m√≥dulo problem√°tico...")
    try:
        from torchvision.transforms import functional_tensor
        print("   ‚úÖ M√≥dulo functional_tensor disponible")
    except ImportError:
        print("   ‚ùå M√≥dulo functional_tensor no disponible")
    
    print("\nüîß SOLUCIONANDO PROBLEMA TORCHVISION")
    print("=" * 50)
    
    # Paso 1: Desinstalar torchvision actual
    if not run_command("pip uninstall torchvision -y", "Desinstalando torchvision actual"):
        print("‚ö†Ô∏è Continuando de todas formas...")
    
    # Paso 2: Limpiar cach√© de pip
    run_command("pip cache purge", "Limpiando cach√© de pip")
    
    # Paso 3: Instalar versi√≥n compatible de torchvision
    print("\nüì¶ Instalando versi√≥n compatible de torchvision...")
    
    # Intentar diferentes versiones compatibles
    torchvision_versions = [
        "torchvision==0.15.2",
        "torchvision==0.14.1", 
        "torchvision==0.13.1",
        "torchvision==0.12.0"
    ]
    
    for version in torchvision_versions:
        print(f"\nüîÑ Intentando instalar {version}...")
        if run_command(f"pip install {version} --no-cache-dir", f"Instalando {version}"):
            # Verificar si el m√≥dulo problem√°tico ahora est√° disponible
            try:
                from torchvision.transforms import functional_tensor
                print("‚úÖ M√≥dulo functional_tensor ahora disponible")
                break
            except ImportError:
                print("‚ùå M√≥dulo functional_tensor a√∫n no disponible, probando siguiente versi√≥n...")
                continue
        else:
            print(f"‚ùå Fall√≥ instalaci√≥n de {version}")
    
    # Paso 4: Verificar instalaci√≥n final
    print("\nüß™ VERIFICACI√ìN FINAL")
    print("=" * 50)
    
    try:
        import torchvision
        print(f"‚úÖ torchvision instalado: {torchvision.__version__}")
    except ImportError:
        print("‚ùå torchvision no se pudo importar")
        return False
    
    try:
        from torchvision.transforms import functional_tensor
        print("‚úÖ M√≥dulo functional_tensor disponible")
    except ImportError:
        print("‚ùå M√≥dulo functional_tensor a√∫n no disponible")
        print("\nüîß Intentando soluci√≥n alternativa...")
        
        # Crear un m√≥dulo de compatibilidad
        try:
            import torchvision.transforms.functional as F
            # Crear un alias para compatibilidad
            torchvision.transforms.functional_tensor = F
            print("‚úÖ Soluci√≥n alternativa aplicada")
        except Exception as e:
            print(f"‚ùå No se pudo aplicar soluci√≥n alternativa: {e}")
            return False
    
    print("\nüéâ ¬°PROBLEMA SOLUCIONADO!")
    print("=" * 50)
    print("Ahora puedes ejecutar el procesamiento por lotes:")
    print("python run_batch_processing.py --source /content/DanielaAS.jpg --videos /content/113.mp4 --output-dir /content/resultados --execution-threads 31 --temp-frame-quality 100 --keep-fps")
    
    return True

if __name__ == "__main__":
    main() 
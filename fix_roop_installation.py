#!/usr/bin/env python3
"""
Script para arreglar la instalaci√≥n de ROOP en Google Colab
Maneja diferentes estructuras de repositorio
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def detect_roop_structure():
    """Detectar la estructura del repositorio ROOP"""
    print("üîç DETECTANDO ESTRUCTURA DE ROOP:")
    print("=" * 40)
    
    current_dir = os.getcwd()
    print(f"üìÅ Directorio actual: {current_dir}")
    
    # Buscar archivos clave de ROOP
    key_files = ['run.py', 'requirements.txt']
    found_files = []
    
    for file in key_files:
        if os.path.exists(file):
            found_files.append(file)
            print(f"‚úÖ Encontrado: {file}")
        else:
            print(f"‚ùå No encontrado: {file}")
    
    # Buscar directorio roop
    if os.path.exists('roop'):
        print("‚úÖ Directorio roop encontrado")
        return 'standard'
    else:
        print("‚ùå Directorio roop no encontrado")
        
        # Buscar archivos que sugieran estructura alternativa
        if os.path.exists('roop.py'):
            print("‚úÖ Archivo roop.py encontrado")
            return 'single_file'
        
        # Buscar otros directorios que puedan contener el c√≥digo
        for item in os.listdir('.'):
            if os.path.isdir(item) and item != '.git':
                print(f"üìÅ Directorio encontrado: {item}")
        
        return 'unknown'

def create_roop_module():
    """Crear el m√≥dulo roop si no existe"""
    print("\nüì¶ CREANDO M√ìDULO ROOP:")
    print("=" * 40)
    
    # Crear directorio roop
    if not os.path.exists('roop'):
        os.makedirs('roop')
        print("‚úÖ Directorio roop creado")
    
    # Crear __init__.py
    init_content = '''"""
ROOP - Deep Face Swap
"""

__version__ = "1.0.0"
'''
    
    with open('roop/__init__.py', 'w') as f:
        f.write(init_content)
    print("‚úÖ __init__.py creado")
    
    # Buscar archivos Python que puedan ser parte del m√≥dulo
    python_files = []
    for file in os.listdir('.'):
        if file.endswith('.py') and file not in ['run.py', 'install_roop_colab.py', 'fix_roop_installation.py']:
            python_files.append(file)
    
    print(f"üìÑ Archivos Python encontrados: {python_files}")
    
    # Crear estructura b√°sica del m√≥dulo
    module_files = {
        'core.py': '''"""
Core functionality for ROOP
"""

def run():
    """Main entry point"""
    print("ROOP core module loaded")
''',
        'face_analyser.py': '''"""
Face analysis functionality
"""

def get_face_analyser():
    """Get face analyser instance"""
    return None
''',
        'predictor.py': '''"""
NSFW predictor
"""

def predict_video_skip_nsfw(target_path: str) -> bool:
    """Skip NSFW prediction"""
    return False
'''
    }
    
    # Crear directorios necesarios
    os.makedirs('roop/processors', exist_ok=True)
    os.makedirs('roop/processors/frame', exist_ok=True)
    
    # Crear archivos del m√≥dulo
    for filename, content in module_files.items():
        with open(f'roop/{filename}', 'w') as f:
            f.write(content)
        print(f"‚úÖ {filename} creado")
    
    # Crear __init__.py para processors
    with open('roop/processors/__init__.py', 'w') as f:
        f.write('"""Processors module"""\n')
    
    with open('roop/processors/frame/__init__.py', 'w') as f:
        f.write('"""Frame processors module"""\n')
    
    print("‚úÖ Estructura del m√≥dulo roop creada")

def install_dependencies():
    """Instalar dependencias"""
    print("\nüì¶ INSTALANDO DEPENDENCIAS:")
    print("=" * 40)
    
    try:
        cmd = [
            sys.executable, "-m", "pip", "install",
            "--extra-index-url", "https://download.pytorch.org/whl/cu118",
            "-r", "requirements.txt"
        ]
        
        print(f"‚è≥ Ejecutando: {' '.join(cmd)}")
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úÖ Dependencias instaladas exitosamente")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error instalando dependencias:")
        print(f"STDOUT: {e.stdout}")
        print(f"STDERR: {e.stderr}")
        return False

def install_roop_package():
    """Instalar el paquete roop"""
    print("\nüì¶ INSTALANDO PAQUETE ROOP:")
    print("=" * 40)
    
    try:
        # Instalar en modo desarrollo
        cmd = [sys.executable, "-m", "pip", "install", "-e", "."]
        print(f"‚è≥ Ejecutando: {' '.join(cmd)}")
        
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("‚úÖ Paquete roop instalado exitosamente")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error instalando paquete roop:")
        print(f"STDOUT: {e.stdout}")
        print(f"STDERR: {e.stderr}")
        return False

def test_roop_import():
    """Probar que roop se puede importar"""
    print("\nüß™ PROBANDO IMPORTACI√ìN ROOP:")
    print("=" * 40)
    
    try:
        import roop
        print("‚úÖ M√≥dulo roop importado")
        
        # Probar importar core
        try:
            from roop import core
            print("‚úÖ M√≥dulo core importado")
        except ImportError as e:
            print(f"‚ö†Ô∏è Error importando core: {e}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Error importando roop: {e}")
        return False

def setup_python_path():
    """Configurar path de Python"""
    print("\nüîß CONFIGURANDO PYTHON PATH:")
    print("=" * 40)
    
    current_dir = os.getcwd()
    
    if current_dir not in sys.path:
        sys.path.insert(0, current_dir)
        print(f"‚úÖ Agregado al path: {current_dir}")
    
    return True

def main():
    """Funci√≥n principal"""
    print("üöÄ ARREGLANDO INSTALACI√ìN DE ROOP")
    print("=" * 60)
    
    # Detectar estructura
    structure = detect_roop_structure()
    print(f"üìã Estructura detectada: {structure}")
    
    # Crear m√≥dulo roop si es necesario
    if structure == 'unknown':
        create_roop_module()
    
    # Instalar dependencias
    if not install_dependencies():
        print("‚ùå Error instalando dependencias")
        return False
    
    # Configurar path
    setup_python_path()
    
    # Instalar paquete
    if not install_roop_package():
        print("‚ùå Error instalando paquete")
        return False
    
    # Probar importaci√≥n
    if not test_roop_import():
        print("‚ùå Error probando importaci√≥n")
        return False
    
    print("\n‚úÖ INSTALACI√ìN ARREGLADA EXITOSAMENTE")
    print("=" * 60)
    print("üìã PR√ìXIMOS PASOS:")
    print("1. Ejecutar: python optimize_colab_gpu.py")
    print("2. Usar: python run_colab_gpu_optimized.py --source imagen.jpg --target video.mp4 -o resultado.mp4")
    
    return True

if __name__ == '__main__':
    main() 